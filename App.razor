@using MoneySaver.SPA.Exceptions
@using MoneySaver.SPA.Services;
@inject IAuthenticationService AuthenticationService
@inject NavigationManager navigation

<CascadingAuthenticationState>
        <Router AppAssembly="@typeof(App).Assembly" OnNavigateAsync="@OnNavigateAsync">
            <Found Context="routeData">
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                    <Authorizing>
                        <text>Please wait, we are authorizing the user.</text>
                    </Authorizing>
                    <NotAuthorized>
                        <RedirectToLogin/>
                        @*@if (context.User.Identity?.IsAuthenticated != true)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <p role="alert">You are not authorized to access this resource.</p>
                    }*@
                    </NotAuthorized>
                </AuthorizeRouteView>
                @*<FocusOnNavigate RouteData="@routeData" Selector="h1" />*@
            </Found>
            <NotFound>
                <PageTitle>Not found</PageTitle>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p role="alert">Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
</CascadingAuthenticationState>

@code {
    private async Task OnNavigateAsync(NavigationContext context)
    {
        var auth = await AuthenticationService.UserIsLogged();
        //TODO: Need to use constan variables for the routes
        if (!auth && context.Path != "login" && context.Path != "register")
        {
            navigation.NavigateTo("/login", true);
        }
    }
}
