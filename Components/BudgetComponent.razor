@if (ShowComponent)
{
    <div>Start date: @BudgetComponentModel.StartDate.ToString(Constants.DATE_FORMAT)</div>
    <div>End date: @BudgetComponentModel.EndDate.ToString(Constants.DATE_FORMAT)</div>
    @if (TransactionCategories.Any())
    {
        <div style="margin:10px 0 10px 0">
            <button @onclick="AddItem" class="btn btn-info table-btn"><i class="fas fa-plus" />Add budget item</button>

            @if (BudgetComponentModel.BudgetItems is not null && !BudgetComponentModel.BudgetItems.Any())
            {
                <button @onclick="CopyBudgetInUseItems" style="margin-left:10px" class="btn btn-info table-btn"><i class="fas fa-plus" />Copy budget in use items</button>
            }
        </div>
    }
    else
    {
        <div class="alert-info">Please create categories in order to add them to the budget.</div>
    }

    if (this.BudgetComponentModel.BudgetItems is not null && this.BudgetComponentModel.BudgetItems.Any())
    {
        <div class="row">
            <div class="col-md-12">
                <RadzenGrid AllowFiltering="false" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="false"
                    AllowSorting="true" Data="@BudgetComponentModel.BudgetItems" TItem="MoneySaver.SPA.Models.BudgetItemModel" AllowColumnResize="false">
                    <Columns>
                        <RadzenGridColumn Width="300px" TItem="MoneySaver.SPA.Models.BudgetItemModel" Property="TransactionCategory" Title="Category" Filterable="false" Sortable="false">
                            <Template Context="data">
                                @data.TransactionCategory.AlternativeName
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="MoneySaver.SPA.Models.BudgetItemModel" Property="Progress" Width="400px" TextAlign="Radzen.TextAlign.Right" Title="Progress" Filterable="false" Sortable="false">
                            <Template Context="data">
                                <div class="progress">
                                    <div class="progress-bar @BudgetComponent.CheckLevel(data.Progress)"
                                         role="progressbar"
                                         style="width: @(data.Progress)%"
                                         aria-valuenow="@data.Progress"
                                         aria-valuemin="0"
                                         aria-valuemax="100">
                                     </div>
                                </div>
                            </Template>
                            <FooterTemplate>
                                <b>Total: </b>
                            </FooterTemplate>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="MoneySaver.SPA.Models.BudgetItemModel" Property="LimitAmmount" Title="Amount" TextAlign="Radzen.TextAlign.Right">
                            <Template Context="data">

                                @string.Format("{0:0.00}", data.LimitAmount)
                            </Template>
                            <FooterTemplate>
                                @string.Format("{0:0.00}", BudgetComponentModel.LimitAmount)
                            </FooterTemplate>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="MoneySaver.SPA.Models.BudgetItemModel" Property="SpentAmmount" Title="Spent" TextAlign="Radzen.TextAlign.Right">
                            <Template Context="data">
                                @string.Format("{0:0.00}", data.SpentAmount)
                            </Template>
                            <FooterTemplate>
                                @string.Format("{0:0.00}", BudgetComponentModel.TotalSpentAmmount)
                            </FooterTemplate>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="MoneySaver.SPA.Models.BudgetItemModel" Title="Left" TextAlign="Radzen.TextAlign.Right">
                            <Template Context="data">
                                @{
                                    var amountLeft = data.LimitAmount - data.SpentAmount;
                                }
                                <span style="color:@(BudgetComponent.CheckColor(amountLeft))">
                                    @string.Format("{0:0.00}", amountLeft)
                                </span>
                            </Template>
                            <FooterTemplate>
                                @string.Format("{0:0.00}", BudgetComponentModel.TotalLeftAmount)
                            </FooterTemplate>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="MoneySaver.SPA.Models.Transaction" Property="AdditionalNote" Filterable="false" Sortable="false" Title="Notes" />
                        <RadzenGridColumn Width="100px" TItem="MoneySaver.SPA.Models.BudgetItemModel" Title="" Filterable="false" Sortable="false">
                            <Template Context="budgetItem">
                                <RadzenButton Click="@(() => EditItem(budgetItem))" Icon="edit" ButtonStyle="Radzen.ButtonStyle.Secondary" />
                                <RadzenButton Click="@(()=> RemoveItem(budgetItem.Id))" Icon="close" ButtonStyle="Radzen.ButtonStyle.Danger" />
                            </Template>
                        </RadzenGridColumn>
                    </Columns>
                </RadzenGrid>
            </div>

            <BudgetItemDialog @ref="BudgetItemDialog" CloseEventCallback="@AddItem_OnDialogClose" BudgetId="@BudgetComponentModel.Id" ТransactionCategories="@TransactionCategories.ToArray()"></BudgetItemDialog>
        </div>
    }

}
